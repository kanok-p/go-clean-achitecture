// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	validator "github.com/go-playground/validator/v10"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

// IsDateFormat provides a mock function with given fields:
func (_m *Validator) IsDateFormat() validator.Func {
	ret := _m.Called()

	var r0 validator.Func
	if rf, ok := ret.Get(0).(func() validator.Func); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validator.Func)
		}
	}

	return r0
}

// Unique provides a mock function with given fields: ctx
func (_m *Validator) Unique(ctx context.Context) validator.Func {
	ret := _m.Called(ctx)

	var r0 validator.Func
	if rf, ok := ret.Get(0).(func(context.Context) validator.Func); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validator.Func)
		}
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, params
func (_m *Validator) Validate(ctx context.Context, params interface{}) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
