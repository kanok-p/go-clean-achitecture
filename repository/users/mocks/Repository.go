// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domainusers "github.com/kanok-p/go-clean-architecture/domain/users"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Repository) Delete(ctx context.Context, input *primitive.ObjectID) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.ObjectID) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, input
func (_m *Repository) Get(ctx context.Context, input map[string]interface{}) (*domainusers.Users, error) {
	ret := _m.Called(ctx, input)

	var r0 *domainusers.Users
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) *domainusers.Users); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainusers.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, offset, limit, filter
func (_m *Repository) List(ctx context.Context, offset int64, limit int64, filter primitive.M) (int64, []*domainusers.Users, error) {
	ret := _m.Called(ctx, offset, limit, filter)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, primitive.M) int64); ok {
		r0 = rf(ctx, offset, limit, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 []*domainusers.Users
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, primitive.M) []*domainusers.Users); ok {
		r1 = rf(ctx, offset, limit, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*domainusers.Users)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, primitive.M) error); ok {
		r2 = rf(ctx, offset, limit, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: ctx, input
func (_m *Repository) Save(ctx context.Context, input *domainusers.Users) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domainusers.Users) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
